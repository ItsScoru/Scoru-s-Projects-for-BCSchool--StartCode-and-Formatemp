A – Rispondi alle seguenti domande argomentando la risposta:

1) Che differenza c’è tra dati e database?
2) Cosa si intende per Data Modeling?
3) Cos’è un DBMS e quali sono le sue principali applicazioni?
4) Si può avere più di un valore per cella?
5) Che differenza c’è tra entità ed attributo?
6) Che cos’è un’istanza?
7) Quali sono le cardinalità delle relazioni?
8) Cos’è la cardinalità di una tabella? È importante?
9) Cosa intendiamo per integrità dei dati? E per integrità referenziale?
10) Come è possibile raffinare lo schema di un database?
11) Cosa sono le chiavi e che tipi di chiavi è possibile avere in un database relazionale?
12) Cosa si intende per operazioni DDL, DML, DQL e se ne riporti un esempio di ciascun tipo.
13) Cosa sono i vincoli?
14) Cos’è la manipolazione dei dati?
15) Cosa si intende per atomico?
16) Qual è il significato del termine NULL?
17) A cosa serve la Dot notation?
18) Fai un esempio di utilizzo dell’Alias.
19) Quando utilizziamo ALTER? E UPDATE?
20) Perché utilizziamo UNIQUE per un attributo?
21) Che cos’è una query?
22) Quali wildcards conosci? Spiega il loro utilizzo.
23) Qual è la differenza tra DROP e DELETE?
24) A cosa serve auto increment?
25) Cos’è una join?
26) Qual è la differenza tra left join e right join?
27) Differenza tra WHERE e ON.
28) Quale clausola permette di evitare il ripetersi di righe duplicate in una query SQL?
29) Quali sono gli operatori aggregati?
30) Quando e perché utilizziamo Query annidate?

1) Un database è una raccolta di informazioni, un dato è un'informazione.
2) È la creazione di uno schema grafico per rappresentare il database e i 
    rapporti fra le varie entità in esso racchiuse.
3) Un DataBase Management System è un linguaggio di interrogazione creato 
    appositamente per gestire, manipolare ed interrogare un database.
4) No.
5) Un'entità è una raccolta di dati chiamati attributi che servono ad
    identificarla o descriverla.
6) Un'istanza è una riga di una tabella, nella quale vengono registrati
    valori per gli attributi che sono legati dall'appartenenza allo
    stesso elemento, alla stregua delle istanze degli oggetti di Java.
7) La cardinalità tra le relazioni si riferisce alla quantità di istanze
    che hanno valori condivisi tra due o più tabelle. Per intenderci
    utilizzando "INNER JOIN" si possono visualizzare gli elementi delle
    tabelle che condividono dei legami, creando quindi le relazioni tra
    tabelle.
8) La cardinalità di una tabella si riferisce al numero di valori presenti
    in ogni colonna di una tabella, che può variare in presenza di NULL ed
    è molto importante conoscerla per le query.
9) Si intende la possibilità di applicare dei modificatori alle colonne
    per far si che i dati inseriti in esse corrispondano sempre a certi
    criteri necessari per il buon funzionamento di un database. Si possono
    avere specifiche di tipo "NOT NULL" che quindi obbliga ad inserire
    un dato, o "UNIQUE" che si assicura che il dato inserito non
    corrisponda ad un dato simile. Per l'integrità referenziale ovviamente
    si parla di "FOREIGN KEY" che permette di creare una relazione fra
    due tabelle.
10) Eliminando le relazioni many to many che si presentano nel database,
    semplificandole in relazioni one to mani, più semplici da gestire
    in una query, con la creazione di tabelle che fungono da "ponte".
11) Le chiavi sono valori univoci per ogni istanza che vengono utilizzati
    per accedere e distinguere le varie istanze. Una PRIMARY KEY si
    riferisce alla chiave univoca distintiva della tabella in cui è
    registrata, FOREIGN KEY invece, utilizzato con REFERENCE prende il
    valore di una PRIMARY KEY di una tabella, creando così una relazione.
    Inoltre, una tabella può fare riferimento a più FOREIGN KEY ma può
    ovviamente avere una sola PRIMARY KEY.
12) DDL sta per Data Definition Language e sono delle dichiarazioni utili
    a creare database e tabelle (
        CREATE TABLE IF NOT EXISTS tabella1 (
            ID INT(4) AUTO_INCREMENT PRIMARY KEY,
            Valore1 VARCHAR(32) NOT NULL,
            Valore2 DECIMAL(32) UNIQUE,
            ecc.
        );
    ), DML sta per Data Manipulation Language e sono dichiarazioni che ci
    permettono di inserire o alterare i dati all'intero delle tabelle(
        INSERT INTO Tabella1 (ID, Valore1, Valore2) (20, "Hello World", 30.1);
        UPDATE Tabella1 SET Valore2 = 10.3  WHERE Valore2 = 30.1;
    ), DQL sta per Data Query Languade e sono dichiarazioni che interrogano
    il database (
        SELECT *
        FROM Tabella1
        WHERE ID < 5;
    )
13) Sono dei modificatori che applichiamo agli attributi che devono essere
    rispettati all'inserimento di dati nel database.
14) È la possibilità di inserire o modificare valori alle istanze delle tabelle.
15) Per atomico la caratteristica di un attributo di non
    essere composto (al contrario di un risultato di SUM).
16) In SQL NULL fa riferimento all'assenza di valore nella cella, che però è
    diverso da nessun valore.
17) Per specificare a quale database, tabella o colonna bisogna fare riferimento.
18) SELECT t1.Valore1 AS v1, t1.Valore2 AS v2
    FROM Tabella1 AS t1
    WHERE ID > 11;
19) ALTER viene utilizzato per modificare le colonne di una tabella. UPDATE viene
    invece usato per modificare un valore già immesso in una cella.
20) UNIQUE fa riferimento all'univocità di un attributo, come ad esempio un
    codice fiscale, il quale vogliamo essere sicuri venga inserito in modo
    univoco nel database e che non è una PRIMARY KEY (univoca di default).
21) Un'interrogazione al database utilizzando il construtto SELECT.
22) Nell'utilizzo di LIKE si possono aggiungere "%" per indicare vari caratteri
    sconosciuti prima o dopo la specifica (come ad esempio "%nome") o anche
    "_" per indicare la presenza di un singolo carattere sconosciuto (come ad
    esempio "MATT__").
23) DROP viene utilizzato per cancellare un'intera tabella e i dati in essa
    contenuti, DELETE viene invece utilizzato per cancellare i dati all'interrogano
    di una tabella.
24) AUTO_INCREMENT viene utilizzato per incrementare di un'unità un attributo
    numerico (solitamente utilizzato in una PRIMARY KEY).
25) JOIN è una parola chiave che permette l'unione di risultati fra più tabelle.
    Viene utilizzato nel contrutto SELECT permettendo un selezionare altre tabelle
    oltre quella la specificata nel FROM dalle quali prendere i dati.
26) LEFT JOIN prende tutti i risultati della tabella specificata nel FROM,
    indipendentemente dalla presenza di valori NULL e a questa unisce i valori
    corrispondenti della tabella nel JOIN. RIGHT JOIN è l'opposto, prendendo tutti i
    valori della tabella nel JOIN e affibiandogli quelli della tabella nel FROM.
27) WHERE viene utilizzato per dichiarare delle clausole secondo le quali desideriamo
    ricevere i risultati del select. ON invece, utilizzato dopo JOIN serve a specificare
    quali valori debbano essere utilizzati per l'unione delle tabelle (solitamente
    la FOREIGN KEY).
28) DISTINCT, da aggiungere al SELECT.
29) SUM, COUNT, MAX, MIN, AVG.
30) Le query annidate possono essere utilizzate nel FROM o nel WHERE per dichiarare
    o delle tabelle (risultanti della query annidata nel FROM), o dei valori
    necessari alla clausola WHERE (come risultato di un AVG, SQRT ecc.).

----------------------------------------------------------------------------------------------

B – Progettare i seguenti E-R, con minimo 5 entità, per la gestione di:
1) Un ristorante
2) Un aeroporto

----------------------------------------------------------------------------------------------

C – Realizzare il seguente database:
Autore (Cognome(pk), Nazionalità, AnnoM)
Libro (ID(pk), Autore (fk), Titolo, Anno, Prezzo, tipologia) Autore fa riferimento Autore(cognome)
Personaggio (ID_libro(fk), Nome, Cognome) id_libro fa riferimento libro(id)
FILM (Cod_film (pk), Titolo, Regista, Anno, ID_libro (fk)) id_libro fa riferimento libro(id)

CREATE DATABASE EsercizioC;

USE EsercizioC;

CREATE TABLE Autore (
    Cognome VARCHAR(32) PRIMARY KEY,
    Nazionalità VARCHAR(32),
    AnnoM INT(4)
);

CREATE TABLE Libro (
    ID INT(4) AUTO_INCREMENT PRIMARY KEY,
    Autore VARCHAR(32),
    Titolo VARCHAR(64) NOT NULL,
    Anno INT(4) NOT NULL,
    Prezzo DECIMAL(4,2) NOT NULL,
    Tipologia VARCHAR(64) NOT NULL,
    FOREIGN KEY (Autore) REFERENCES Autore(Cognome)
);

CREATE TABLE Personaggio( 
    ID_libro INT(4),
    Nome VARCHAR(32) NOT NULL,
    Cognome VARCHAR(32) NOT NULL,
    FOREIGN KEY (ID_libro) REFERENCES Libro(ID)
);

CREATE TABLE Film (
    Cod_film VARCHAR(4) PRIMARY KEY,
    Titolo VARCHAR(64) NOT NULL,
    Regista VARCHAR(32) NOT NULL,
    Anno INT(4),
    ID_libro INT(4),
    FOREIGN KEY (ID_libro) REFERENCES Libro(ID)
);

INSERT INTO Autore
VALUES ("Dante", "Italiana", 1321),
("Manzoni", "Italiana", 1873),
("Tolkien", "Inglese", 1973),
("Oba", "Giapponese", NULL),
("Disney", "Americana", 1966),
("Lee", "Americana", 2018),
("Rowling", "Inglese", NULL);

INSERT INTO Libro
VALUES (123, "Dante", "Divina_commedia", 1470, 25.50, "Poema"),
(769, "Dante", "Monarchia", 1853, 17, "Saggio"),
(456, "Manzoni", "I_promessi_sposi", 1825, 15.50, "Romanzo"),
(789, "Tolkien", "Il_signore_degli_anelli", 1955, 30, "Fantasy"),
(589, "Tolkien",  "Lo_hobbit", 1937, 35, "Fantasy"),
(963, "Oba", "Death_note", 2003, 5, "Manga"),
(753, "Lee", "Spiderman", 1970, 4, "Fumetto"),
(369, "Rowling", "La_pietra_filosofale", 1998, 25, "Fantasy");

INSERT INTO Personaggio
VALUES (369, "Albus", "Silente"),
(753, "Peter", "Parker"),
(456, "Renzo", "Tramaglino"),
(789, "Frodo", "Baggings"),
(589, "Bilbo", "Baggings");

INSERT INTO Film
VALUES ("Abc", "Harry_Potter", "Columbus", 2001, 369),
("Def", "Il_signore_degli_anelli", "Jackson", 2001, 789),
("Xyz", "Lo_hobbit", "Jackson", 2012, 589),
("Ghi", "I_promessi_sposi", "Nocita", 1989, 456),
("Klm", "Spiderman", "Raimi", 2022, 753);

SELECT Libro.Titolo, Libro.Anno, Libro.Prezzo
FROM Libro
WHERE Libro.Anno < 2022
ORDER BY Libro.prezzo;

SELECT Libro.Titolo, Libro.Anno
FROM Libro
WHERE Libro.Anno > 1700;

SELECT Libro.ID, Libro.Titolo
FROM Libro
LEFT JOIN Film ON Film.ID_libro = Libro.ID
WHERE Film.ID_libro IS NULL;

SELECT DISTINCT Autore.Cognome
FROM Autore
INNER JOIN Libro ON Libro.Autore = Autore.Cognome
ORDER BY Autore.Cognome;

SELECT DISTINCT Autore.Cognome
FROM Autore
WHERE Autore.Nazionalità NOT LIKE "Italiana"
ORDER BY Autore.Cognome;

SELECT Film.Regista, Autore.Cognome, Autore.Nazionalità
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID 
INNER JOIN Autore ON Libro.Autore = Autore.Cognome
WHERE Autore.Nazionalità LIKE "Americana";

SELECT MIN(Libro.Anno), Libro.Titolo
FROM Libro;

SELECT Libro.Titolo, Autore.Cognome
FROM Libro
INNER JOIN Autore ON Libro.Autore = Autore.Cognome
WHERE Autore.AnnoM IS NULL;

SELECT Libro.Titolo, Autore.Cognome
FROM Libro
INNER JOIN Autore ON Libro.Autore = Autore.Cognome
WHERE Autore.AnnoM IS NOT NULL;

SELECT Libro.Titolo, Libro.Tipologia
FROM Libro
WHERE Libro.Tipologia LIKE "Fumett%";

SELECT Film.Titolo
FROM Film
WHERE Film.Titolo LIKE "H%";

SELECT Libro.Titolo, Libro.Tipologia
From Libro
WHERE Libro.Titolo LIKE "%sposi%" AND Libro.Tipologia LIKE "Romanzo";

SELECT Libro.Titolo, Libro.Tipologia
From Libro
WHERE Libro.Titolo LIKE "%t_" AND Libro.Tipologia LIKE "Manga";

SELECT Libro.Titolo, Libro.Tipologia
From Libro
WHERE Libro.Titolo LIKE "%man" AND Libro.Tipologia LIKE "Fumetto";

SELECT Film.Titolo, Film.Regista, Film.Anno
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
WHERE Libro.Titolo LIKE "Lo_hobbit";

SELECT Libro.Titolo, Libro.Tipologia
FROM Libro
WHERE Libro.Anno > 1900 AND Libro.Titolo LIKE "%gno%";

SELECT Libro.Titolo AS "Titolo libro", Libro.Tipologia, Libro.Autore, Film.Titolo AS "Titolo Film"
From Libro
INNER JOIN Film ON Libro.ID = Film.ID_libro
WHERE Libro.Tipologia LIKE "Romanzo";

SELECT Libro.Titolo, Libro.Autore, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio"
FROM Libro
INNER JOIN Personaggio AS P ON P.ID_libro = Libro.ID
WHERE Libro.Autore LIKE "Tolkien";

SELECT Libro.Titolo, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio"
FROM Personaggio AS P
INNER JOIN Libro ON P.ID_libro = Libro.ID
WHERE P.Nome LIKE "Albus" AND P.Cognome LIKE "Silente";

SELECT Libro.Titolo, Libro.Tipologia, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio"
FROM Libro
INNER JOIN Personaggio AS P ON Personaggio.ID_libro = Libro.ID
WHERE P.Nome LIKE "Bilbo" AND P.Cognome LIKE "Baggings" AND Libro.Tipologia LIKE "Fantasy";

SELECT Film.Titolo, Film.Anno, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio"
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
INNER JOIN Personaggio AS P ON Libro.ID = P.ID_libro
WHERE P.Cognome LIKE "Baggings";

SELECT Libro.Titolo
FROM Libro
INNER JOIN Film ON Film.ID_libro = Libro.ID;

SELECT COUNT(Libro.ID), Libro.Tipologia
FROM Libro
WHERE Libro.Tipologia LIKE "Fantasy";

SELECT COUNT(Film.Cod_film) AS "Film di Jackson"
FROM Film
WHERE Film.Regista LIKE "Jackson";

SELECT Personaggio.Nome, Personaggio.Cognome
FROM Personaggio
INNER JOIN Libro ON Personaggio.ID_libro = Libro.ID
INNER JOIN Film ON Libro.ID = Film.ID_libro
WHERE Film.Titolo LIKE "I_promessi_sposi";

SELECT Film.Titolo AS "Titolo Film", Film.Regista, Libro.Titolo AS "Titolo Libro"
From Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
WHERE Film.Anno BETWEEN 2000 AND 2022;

SELECT Film.Titolo, Autore.Cognome AS "Autore Libro", Autore.Nazionalità
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
INNER JOIN Autore ON Libro.Autore = Autore.Cognome
WHERE Autore.Nazionalità LIKE "Inglese" OR Autore.Nazionalità LIKE "Americana";

ALTER TABLE Personaggio ADD campo_vuoto VARCHAR(10);

SELECT Libro.Titolo, Libro.Tipologia, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio"
FROM Libro
INNER JOIN Personaggio AS P ON Libro.ID = P.ID_libro
WHERE P.Nome LIKE "Peter" AND P.Cognome LIKE "Parker";

SELECT Film.Titolo
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
INNER JOIN Autore ON Libro.Autore = Autore.Cognome
WHERE Libro.Tipologia LIKE "Fumetto" AND Autore.Nazionalità LIKE "Asiatico";
# QUESTA NON DA NULLA PERO', DOVREBBE ESSERE TIPOLOGIA MANGA E NAZIONALITA' GIAPPONESE

SELECT Film.Titolo, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio"
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
INNER JOIN Personaggio AS P ON P.ID_libro = Libro.ID
WHERE Film.Regista LIKE "Columbus";

SELECT Libro.Titolo, MAX(Libro.Prezzo)
FROM Libro;

SELECT P.Nome, P.Cognome
FROM Personaggio AS P
INNER JOIN Libro ON Libro.ID = P.ID_libro
WHERE Libro.Tipologia LIKE "Fantasy";

SELECT Libro.Titolo
FROM Libro
LEFT JOIN Personaggio AS P ON P.ID_libro = Libro.ID
WHERE P.ID_libro IS NULL;

SELECT Film.Titolo, CONCAT(P.Nome, " ", P.Cognome) AS "Personaggio", Libro.Tipologia AS "Genere Libro"
FROM Film
INNER JOIN Libro ON Film.ID_libro = Libro.ID
INNER JOIN Personaggio AS P ON P.ID_libro = Libro.ID
WHERE P.Nome LIKE "Frodo";

SELECT COUNT(Autore.Cognome) AS "Autori non italiani"
FROM Autore
WHERE Autore.Nazionalità NOT LIKE "Italiana";

SELECT COUNT(Libro.ID) AS "Num Manga"
FROM Libro
WHERE Libro.Tipologia LIKE "Manga";

SELECT COUNT(Libro.ID) AS "Num Manga senza film"
FROM Libro
LEFT JOIN Film ON Film.ID_libro = Libro.ID
WHERE Libro.Tipologia LIKE "Manga" AND Film.Cod_film IS NULL;

SELECT Film.Titolo, Film.Anno AS "Anno di uscita", Film.Regista
FROM Film
WHERE Film.Regista LIKE "Jackson";

SELECT COUNT(Libro.ID), Libro.Autore
FROM Libro
WHERE Libro.Autore LIKE "Dante";