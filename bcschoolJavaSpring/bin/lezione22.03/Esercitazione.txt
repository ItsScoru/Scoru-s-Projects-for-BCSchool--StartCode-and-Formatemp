A – Rispondi alle seguenti domande argomentando la risposta:
1)Cos’è un Maven Project?
2)Cosa si intende per persistenza? Ed in cosa consiste il contesto di persistenza?
3)Cosa si intende per Entity Manager?
4)Quali sono le annotazioni necessarie alla configurazione di una Entity?
5)Cosa è fetching? E cascade?
6)Cosa si intende per Impedance Mismatch.
7)Elenca le strategie risolutive per Impedance Mismatch.
8)Cos’è un framework?
9)Che cos’è un design pattern?
10)Che cos’è un POJO?
11)Cos’è una API?
12)Descrivi in generale lo Spring Framework.
13)Che differenza c’è tra Spring e Spring Boot?
14)A cosa serve il file application.properties?
15)Che cos’è IoC Container e come funziona?
16)Cos’è una Dependency Injection?
17)Cos’è Inversion of Control (IoC)?
18)Descrivere la funzione dell’annotazione @Component?
19)Come utilizziamo @Configuration?
20)Per cosa utilizziamo l’annotazione @Autowired?
21)Quanti modi esistono per configurare Spring? Argomenta.
22)Descrivi l’ architettura di Spring Framework.
23)Cosa si intente per dirty-checking?
24)Cosa rappresenta l’application context?
25)Cos’è un Bean?
26)Cosa si intende per Injection Point?
27)Come posso agire sul life-cycle di un Bean. Argomenta.
28)Spiega l’utilizzo dell’annotazione @Lazy.
29)Cosa si intende per Bean Scope?
30)Come utilizziamo l’annotazione @Qualifier? E @Resource?

1) Un tipo di progetto generato che permette l'utilizzo di Hibernate e Spring.
2) La persistenza è la capacità di un dato di sopravvivere all'esecuzione di un
	programma. Ovvero quando i suoi valori vengono salvati in un database.
3) Un entity manager è un API che permette la creazione di entità all'interno
	di un database e la loro manipolazione.
4) @Entity è sicuramente essenziale. Si possono anche aggiungere @Table e 
	@Column.
5) Il fetching indica la possibilità di un bean di essere inizializzato subito
	o solo se necessario (mediante Eager o Lazy). Cascade è la possibilità di
	un dato che permette ad ogni cambiamento effettuato su di esso di essere
	registrato e trasmesso anche alle altre tabelle che vi sono legate.
6) Il livello di differenza tra OOP e DB con relazioni ER.
7) Usare un ORM o un No-SQL
8) Una libreria di metodi che aggiungono funzionalità ad un liguaggio.
9) È una soluzione ad un problema comune che possiamo copiare anzichè ogni
	volta provare a inventarne una nuova.
10) Plain Old Java Object. Semplici classi java.
11) Application Programming Interface. Permettono di aggiungere funzionalità
	al codice.
12) Spring è un framewokr modulare che permette di accedere per esempio all'
	utilizzo dei Beans in una maniera migliore rispetto ai Java Enterprise
	Beans (EJB).
13) Spring è l'intero framework. Boot è un modulo di Spring accessibile
	tramite dependency.
14) Permette di elencare tutte le varie proprietà che vorremmo dare al progetto.
15) L'inversion of control permette di creare tutti gli oggetti al RunTime, che
	quindi non saranno più gestiti dal programmatore e nei quali vengono
	inserite le dependencies tramite DI (Dependencies Injection).
16) Una DI è l'atto di inserire le dipendenze di un Bean al RunTime.
17) È il concetto di "inversione di controllo" per gli oggetti. Il controllo di
	questi ultimi non sarà più quindi in mano al programmatore ma al RunTime,
	ovvero in maniera invertita rispetto al modo convenzionale.
18) 
19) @Configuration indica la classe di configurazione nella quale si inseriscono
	i metodi che creano i Bean. Viene utilizzata dal Context.
20) @Autowired permette di indicare il legame tra un oggetto come attributo e il
	suo corrispettivo Bean nella classe Config. Può essere utilizzata con
	@Qualifier, anche se in quel caso sarebbe meglio utilizzare @Resource.
21) Si puù usare un file di configurazione .XML, un file di configurazione per
	l'utilizzo delle annotazioni (come normalmente dovrebbe accadere), oppure
	la configurazione per campi (da evitare).
22) Spring è costituito da vari moduli indipendenti. Si può quindi utilizzare
	solo ciò di cui abbiamo bisogno.
23) 
24) L'application context permette di far creare gli oggetti al runtime, fa parte
	del modulo Context di spring e viene evocato nel metodo main, chiamando la
	classe di configurazione.
25) Un bean è un oggetto caratterizzato dall'essre gestito dall IoC di Spring.
	Oppure una classe con specifice restrizioni per Java EE.
26) Il punto nel bean nel quale possono essere legate le dipendenze.
27) Con metodi @PostConstructor, metodi normali presenti nella classe o anche
	metodi @PreDestroy.
28) @Lazy indica un bean che viene utilizzato raramente, e che quindi verrà
	caricato e generato solamente se viene utilizzato, e non precaricato come
	normalmmente avviene.
29) lo Scope di un bean è la sua funzionalità e il suo utilizzo. Può essere
	Singleton o Prototype.
30) @Qualifier viene utilizzata insieme ad @Autowire per indicare a che
	risorsa si fa riferimento. Tuttavia l'utilizzo di queste due annotazioni
	è raggruppato nell'annotazione @Resource.